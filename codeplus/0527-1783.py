# greedy, corner case
# 병든 나이트는 오른쪽으로 이동밖에 못하므로, 높이에따라 이동거리가 달라짐
# 또한 제약조건에 따라 4회 이상 이동시 4가지 이동방법을 다 써야 하므로 이를 고려한다
# 주어진 판의 높이가 3보다 작은 경우 모든 이동방법을 다 쓸 수는 없다
# 코너케이스 2개 생성 높이가 1인경우 이동 x, 2인경우 4칸이상 방문 못함
# 마지막으로 높이에 따른 이동제약이 없는 경우, 
# 4가지 이동방법을 다 사용하여 가는 칸을 기준으로 판단한다
n, m = map(int, input().split())
if n == 1:
    print(1)
elif n == 2:
    print(min(4, (m+1)//2))
else:
    # 제한 x인 경우 오른쪽으로 1칸 이동하는 시행을 
    # 최대한 많이 반복하는게 제한된 판에서 가장 많이 이동가능한 방법
    if m >= 7:
        print(m-2)
    else:
        print(min(4, m))